// Utility functions for various button actions

export const downloadPDF = async (data: any, filename: string = 'salary-report') => {
  try {
    // Create a simple PDF content
    const pdfContent = generatePDFContent(data);
    
    // For now, we'll create a text file. In production, you'd use a PDF library like jsPDF
    const blob = new Blob([pdfContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${filename}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
    
    return true;
  } catch (error) {
    console.error('Error downloading PDF:', error);
    return false;
  }
};

export const shareContent = async (data: {
  title: string;
  text: string;
  url?: string;
}) => {
  try {
    if (navigator.share) {
      // Use native sharing API if available
      await navigator.share({
        title: data.title,
        text: data.text,
        url: data.url || window.location.href,
      });
      return true;
    } else {
      // Fallback: Copy to clipboard
      const shareText = `${data.title}\n\n${data.text}\n\n${data.url || window.location.href}`;
      await navigator.clipboard.writeText(shareText);
      
      // Show a toast notification (you can implement a toast system)
      alert('Link copied to clipboard!');
      return true;
    }
  } catch (error) {
    console.error('Error sharing:', error);
    
    // Final fallback: copy to clipboard without notification
    try {
      const shareText = `${data.title}\n\n${data.text}\n\n${data.url || window.location.href}`;
      await navigator.clipboard.writeText(shareText);
      alert('Content copied to clipboard!');
      return true;
    } catch (clipboardError) {
      console.error('Clipboard access failed:', clipboardError);
      return false;
    }
  }
};

export const generatePDFContent = (salaryData: any): string => {
  if (!salaryData) return 'No salary data available';
  
  const date = new Date().toLocaleDateString();
  
  return `
SALARY CALCULATION REPORT
Generated on: ${date}
Website: Salaryfy.io - Your Financial Companion

========================================
SALARY SUMMARY
========================================
Gross Monthly Salary: ₹${salaryData.grossSalary?.toLocaleString('en-IN') || 'N/A'}
Net Take-Home: ₹${salaryData.netSalary?.toLocaleString('en-IN') || 'N/A'}
Total Deductions: ₹${salaryData.grossSalary && salaryData.netSalary ? 
  (salaryData.grossSalary - salaryData.netSalary).toLocaleString('en-IN') : 'N/A'}

========================================
SALARY COMPONENTS
========================================
Basic Salary: ₹${salaryData.basicSalary?.toLocaleString('en-IN') || 'N/A'}
HRA: ₹${salaryData.hra?.toLocaleString('en-IN') || 'N/A'}
Special Allowance: ₹${salaryData.specialAllowance?.toLocaleString('en-IN') || 'N/A'}

========================================
DEDUCTIONS
========================================
Provident Fund (12%): ₹${salaryData.employeePF?.toLocaleString('en-IN') || 'N/A'}
Income Tax: ₹${salaryData.incomeTax?.toLocaleString('en-IN') || 'N/A'}
${salaryData.employeeESIC > 0 ? `ESIC (0.75%): ₹${salaryData.employeeESIC.toLocaleString('en-IN')}\n` : ''}
${salaryData.professionalTax > 0 ? `Professional Tax: ₹${salaryData.professionalTax.toLocaleString('en-IN')}\n` : ''}

========================================
EMPLOYER CONTRIBUTIONS
========================================
Employer PF: ₹${salaryData.employerPF?.toLocaleString('en-IN') || 'N/A'}
${salaryData.employerESIC > 0 ? `Employer ESIC: ₹${salaryData.employerESIC.toLocaleString('en-IN')}\n` : ''}

========================================
NOTES
========================================
- This calculation is based on standard Indian salary structures
- Tax calculations are approximate and for reference only
- Actual tax may vary based on your total income and deductions
- Consult a financial advisor for personalized advice

Generated by Salaryfy.io
Visit: https://salaryfy.io for more financial tools
`;
};

export const copyToClipboard = async (text: string): Promise<boolean> => {
  try {
    await navigator.clipboard.writeText(text);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
};

export const formatShareText = (salaryData: any): string => {
  if (!salaryData) return 'Check out Salaryfy.io for salary calculations!';
  
  return `My salary breakdown from Salaryfy.io:
  
🏦 Gross Salary: ₹${salaryData.grossSalary?.toLocaleString('en-IN')}
💰 Take-Home: ₹${salaryData.netSalary?.toLocaleString('en-IN')}
📊 Savings Rate: ${salaryData.grossSalary && salaryData.netSalary ? 
  ((salaryData.netSalary / salaryData.grossSalary) * 100).toFixed(1) : '0'}%

Calculate yours at Salaryfy.io 📈`;
};

// Function to handle smooth scrolling
export const smoothScrollTo = (elementId: string, offset: number = 80) => {
  const element = document.getElementById(elementId);
  if (element) {
    const elementPosition = element.getBoundingClientRect().top;
    const offsetPosition = elementPosition + window.pageYOffset - offset;

    window.scrollTo({
      top: offsetPosition,
      behavior: 'smooth'
    });
  }
};

// Function to handle email sharing
export const shareViaEmail = (subject: string, body: string) => {
  const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  window.open(mailtoLink);
};

// Function to handle social media sharing
export const shareOnSocial = (platform: 'twitter' | 'linkedin' | 'facebook', text: string, url?: string) => {
  const currentUrl = url || window.location.href;
  let shareUrl = '';

  switch (platform) {
    case 'twitter':
      shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(currentUrl)}`;
      break;
    case 'linkedin':
      shareUrl = `https://linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(currentUrl)}`;
      break;
    case 'facebook':
      shareUrl = `https://facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;
      break;
  }

  if (shareUrl) {
    window.open(shareUrl, '_blank', 'width=600,height=400');
  }
};
